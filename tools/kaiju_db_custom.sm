rule kaiju_db_custom_1:
	output: faa = temp(config['dbdir'] + "{database}/kaiju_db/kaiju_db.faa")
	log: config['dbdir'] + "{database}/log/kaiju_db_custom_1.log"
	benchmark: config['dbdir'] + "{database}/log/kaiju_db_custom_1.time"
	conda: srcdir("../envs/kaiju.yaml")
	params: seq_folder = lambda wildcards: customdbs[wildcards.database]["kaiju"] if wildcards.database in customdbs and "kaiju" in customdbs[wildcards.database] else ""
	shell: 
		"""
		if [ -d "{params.seq_folder}" ]; then
			/usr/bin/env perl {config[tool_alt_path][kaiju]}$(which kaiju | sed 's|bin/kaiju|bin/|g')gbk2faa.pl <(cat {params.seq_folder}/*.gbff) {output.faa} > {log} 2>&1
		else
			echo "Custom database ({wildcards.database}) -> '{params.seq_folder}': No such file or directory" > {log}
		fi
		"""

rule kaiju_db_custom_2:
	input: faa = config['dbdir'] + "{database}/kaiju_db/kaiju_db.faa"
	output: bwt = temp(config['dbdir'] + "{database}/kaiju_db/kaiju_db.bwt"),
			sa = temp(config['dbdir'] + "{database}/kaiju_db/kaiju_db.sa")
	log: config['dbdir'] + "{database}/log/kaiju_db_custom_2.log"
	benchmark: config['dbdir'] + "{database}/log/kaiju_db_custom_2.time"
	threads: config["threads"]
	conda: srcdir("../envs/kaiju.yaml")
	shell: "{config[tool_alt_path][kaiju]}mkbwt -n 5 -a ACDEFGHIKLMNPQRSTVWY -nThreads {threads} -o {config[dbdir]}{wildcards.database}/kaiju_db/kaiju_db {input.faa} > {log} 2>&1"

rule kaiju_db_custom_3:
	input: bwt = config['dbdir'] + "{database}/kaiju_db/kaiju_db.bwt",
			sa = config['dbdir'] + "{database}/kaiju_db/kaiju_db.sa"
	output: fmi = config['dbdir'] + "{database}/kaiju_db/kaiju_db.fmi"
	log: config['dbdir'] + "{database}/log/kaiju_db_custom_3.log"
	benchmark: config['dbdir'] + "{database}/log/kaiju_db_custom_3.time"
	conda: srcdir("../envs/kaiju.yaml")
	shell: "{config[tool_alt_path][kaiju]}mkfmi {config[dbdir]}{wildcards.database}/kaiju_db/kaiju_db > {log} 2>&1"

rule kaiju_db_custom_4:
	input: taxdump = ancient(config["dbdir"] + "taxonomy/taxdump.tar.gz")
	output: config['dbdir'] + "{database}/kaiju_db/nodes.dmp"
	log: config['dbdir'] + "{database}/log/kaiju_db_custom_4.log"
	benchmark: config['dbdir'] + "{database}/log/kaiju_db_custom_4.time"
	shell: "tar -zxvf {input.taxdump} -C {config[dbdir]}{wildcards.database}/kaiju_db/ nodes.dmp > {log} 2>&1"
	
rule kaiju_db_custom_profile:
	output: temp(config['dbdir'] + "{database}/kaiju.dbaccession.out")
	log: config['dbdir'] + "{database}/log/kaiju_db_custom_profile.log"
	benchmark: config['dbdir'] + "{database}/log/kaiju_db_custom_profile.time"
	params: seq_folder = lambda wildcards: customdbs[wildcards.database]["kaiju"] if wildcards.database in customdbs and "kaiju" in customdbs[wildcards.database] else ""
	# Recover all protein_id which contain translations (need to change dbprofile to get from protein db instead of nuccore)
	#shell: "grep -e '/translation=' -e '/protein_id=' <(cat {params.seq_folder}/*.gbff) | grep -B 1 '/translation=' | grep '/protein_id=' | grep -o '\".*\"' | sed 's/\"//g' > {output} 2> {log}"
	shell: 
		"""
		if [ -d "{params.seq_folder}" ]; then
			grep -h '^VERSION' {params.seq_folder}/*.gbff | tr -s ' ' | cut -d ' ' -f 2 > {output} 2> {log}
		else
			echo "Custom database ({wildcards.database}) -> '{params.seq_folder}': No such file or directory" > {log}
		fi
		"""
	
rule kaiju_db_custom_check:
	input: ancient(config['dbdir'] + "{database}/kaiju.dbprofile.out"),
			ancient(config['dbdir'] + "{database}/kaiju_db/kaiju_db.fmi"),
			ancient(config['dbdir'] + "{database}/kaiju_db/nodes.dmp")
	output: db_check = touch(config['dbdir'] + "{database}/kaiju_db_check.done")
	log: config['dbdir'] + "{database}/log/kaiju_db_custom_check.log"
	benchmark: config['dbdir'] + "{database}/log/kaiju_db_custom_check.time"
